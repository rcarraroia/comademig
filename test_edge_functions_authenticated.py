#!/usr/bin/env python3
"""
TESTE DAS EDGE FUNCTIONS COM AUTENTICA√á√ÉO
Testa as fun√ß√µes usando um usu√°rio autenticado
"""

import json
import requests
from supabase import create_client, Client

# Configura√ß√µes do Supabase
SUPABASE_URL = "https://amkelczfwazutrciqtlk.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFta2VsY3pmd2F6dXRyY2lxdGxrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODQxMjYsImV4cCI6MjA2ODc2MDEyNn0.7-M7DCqMzfZtXvcg6Zlf24zNv-XqvDT_oAznQGiqFHY"

def authenticate_user():
    """Autentica um usu√°rio existente"""
    print("üîê AUTENTICANDO USU√ÅRIO")
    print("-" * 40)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Primeiro, vamos verificar se temos usu√°rios
    try:
        # Buscar um usu√°rio admin existente
        users_response = supabase.table('profiles').select('*').eq('role', 'admin').limit(1).execute()
        
        if users_response.data:
            admin_user = users_response.data[0]
            print(f"‚úÖ Usu√°rio admin encontrado: {admin_user['full_name']}")
            
            # Simular autentica√ß√£o (em produ√ß√£o seria com email/senha)
            # Para teste, vamos usar o service role key se dispon√≠vel
            return admin_user['id']
        else:
            print("‚ùå Nenhum usu√°rio admin encontrado")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o: {str(e)}")
        return None

def test_edge_functions_with_auth():
    """Testa Edge Functions com diferentes cen√°rios"""
    print("\nüîç TESTE DAS EDGE FUNCTIONS COM AUTENTICA√á√ÉO")
    print("-" * 50)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Teste 1: Fun√ß√£o de c√°lculo de valor (n√£o precisa auth)
    print("üìã Testando fun√ß√£o de c√°lculo de valor...")
    try:
        response = supabase.rpc('calculate_certification_value', {
            'certification_type': 'ministerio'
        }).execute()
        
        if response.data:
            print(f"   ‚úÖ Valor calculado: R$ {response.data}")
        else:
            print("   ‚ùå Erro no c√°lculo")
            
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    # Teste 2: Verificar se as Edge Functions existem
    print("\nüìã Verificando exist√™ncia das Edge Functions...")
    
    functions_to_check = [
        'asaas-create-payment',
        'asaas-create-payment-with-split', 
        'asaas-check-payment',
        'asaas-webhook',
        'affiliates-management'
    ]
    
    for func_name in functions_to_check:
        try:
            # Fazer uma chamada m√≠nima para ver se a fun√ß√£o existe
            response = supabase.functions.invoke(func_name, {
                'body': {'ping': True}
            })
            
            print(f"   ‚úÖ {func_name}: Fun√ß√£o existe")
            
            # Analisar a resposta
            if hasattr(response, 'data') and response.data:
                if 'N√£o autorizado' in str(response.data):
                    print(f"      ‚ö†Ô∏è Precisa de autentica√ß√£o")
                elif 'error' in str(response.data):
                    print(f"      ‚ö†Ô∏è Erro esperado (dados inv√°lidos)")
                else:
                    print(f"      ‚úÖ Resposta OK")
            
        except Exception as e:
            error_msg = str(e)
            if 'N√£o autorizado' in error_msg:
                print(f"   ‚ö†Ô∏è {func_name}: Precisa de autentica√ß√£o")
            elif 'does not exist' in error_msg:
                print(f"   ‚ùå {func_name}: Fun√ß√£o n√£o existe")
            else:
                print(f"   ‚úÖ {func_name}: Fun√ß√£o existe (erro: {error_msg[:50]}...)")

def test_database_functions():
    """Testa fun√ß√µes do banco de dados"""
    print("\nüîç TESTE DAS FUN√á√ïES DO BANCO")
    print("-" * 40)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Teste 1: Verificar valores de certid√µes
    print("üìã Testando valores de certid√µes...")
    try:
        valores = supabase.table('valores_certidoes').select('*').execute().data
        print(f"   ‚úÖ {len(valores)} tipos de certid√£o configurados:")
        for valor in valores:
            print(f"      - {valor['tipo']}: R$ {valor['valor']}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")
    
    # Teste 2: Verificar fun√ß√£o de c√°lculo
    print("\nüìã Testando fun√ß√£o calculate_certification_value...")
    try:
        for tipo in ['ministerio', 'vinculo', 'atuacao', 'historico', 'ordenacao']:
            valor = supabase.rpc('calculate_certification_value', {
                'certification_type': tipo
            }).execute().data
            print(f"   ‚úÖ {tipo}: R$ {valor}")
    except Exception as e:
        print(f"   ‚ùå Erro: {str(e)}")

def test_payment_flow_simulation():
    """Simula o fluxo de pagamento sem criar cobran√ßa real"""
    print("\nüîç SIMULA√á√ÉO DO FLUXO DE PAGAMENTO")
    print("-" * 40)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Dados de teste
    test_data = {
        "customer": {
            "name": "Jo√£o Silva Teste",
            "email": "joao.teste@email.com",
            "cpfCnpj": "12345678901",
            "phone": "31999999999"
        },
        "billingType": "PIX",
        "value": 45.0,
        "dueDate": "2025-01-20",
        "description": "Certid√£o do Minist√©rio - Teste",
        "tipoCobranca": "certidao",
        "certification_type": "ministerio"
    }
    
    print("üìã Dados do teste:")
    print(f"   Cliente: {test_data['customer']['name']}")
    print(f"   Valor: R$ {test_data['value']}")
    print(f"   Tipo: {test_data['tipoCobranca']}")
    
    # Verificar se o valor est√° correto
    try:
        valor_esperado = supabase.rpc('calculate_certification_value', {
            'certification_type': test_data['certification_type']
        }).execute().data
        
        if valor_esperado == test_data['value']:
            print(f"   ‚úÖ Valor correto: R$ {valor_esperado}")
        else:
            print(f"   ‚ö†Ô∏è Valor divergente. Esperado: R$ {valor_esperado}, Enviado: R$ {test_data['value']}")
            
    except Exception as e:
        print(f"   ‚ùå Erro na verifica√ß√£o: {str(e)}")
    
    print("\nüìã Testando Edge Function (sem criar cobran√ßa real)...")
    try:
        # Adicionar flag de teste para n√£o criar cobran√ßa real
        test_data['test_mode'] = True
        
        response = supabase.functions.invoke('asaas-create-payment', {
            'body': test_data
        })
        
        if hasattr(response, 'data') and response.data:
            print(f"   üìã Resposta da fun√ß√£o: {str(response.data)[:200]}...")
        else:
            print("   ‚ö†Ô∏è Fun√ß√£o n√£o retornou dados")
            
    except Exception as e:
        error_msg = str(e)
        if 'N√£o autorizado' in error_msg:
            print("   ‚ö†Ô∏è Fun√ß√£o precisa de autentica√ß√£o de usu√°rio")
        else:
            print(f"   ‚ùå Erro: {error_msg}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE COMPLETO COM AUTENTICA√á√ÉO")
    print("=" * 50)
    
    # Executar testes
    test_database_functions()
    test_edge_functions_with_auth()
    test_payment_flow_simulation()
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("‚úÖ Fun√ß√µes do banco: Testadas")
    print("‚ö†Ô∏è Edge Functions: Precisam de autentica√ß√£o de usu√°rio")
    print("‚úÖ Fluxo de pagamento: Estrutura OK")
    print("\nüí° PR√ìXIMOS PASSOS:")
    print("1. Implementar autentica√ß√£o no frontend")
    print("2. Testar Edge Functions via interface web")
    print("3. Configurar vari√°veis de ambiente do Asaas")

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
DIAGN√ìSTICO DE PROBLEMAS DE AUTENTICA√á√ÉO E EDGE FUNCTIONS
"""

import json
from supabase import create_client, Client

# Configura√ß√µes do Supabase
SUPABASE_URL = "https://amkelczfwazutrciqtlk.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFta2VsY3pmd2F6dXRyY2lxdGxrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODQxMjYsImV4cCI6MjA2ODc2MDEyNn0.7-M7DCqMzfZtXvcg6Zlf24zNv-XqvDT_oAznQGiqFHY"

def diagnose_auth_system():
    """Diagnostica problemas no sistema de autentica√ß√£o"""
    print("üîç DIAGN√ìSTICO DO SISTEMA DE AUTENTICA√á√ÉO")
    print("=" * 50)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    try:
        # 1. Verificar se h√° usu√°rios no sistema
        print("\nüìã Verificando usu√°rios existentes...")
        profiles = supabase.table('profiles').select('*').execute()
        print(f"‚úÖ Usu√°rios encontrados: {len(profiles.data)}")
        
        if profiles.data:
            for profile in profiles.data:
                print(f"   - {profile.get('nome_completo', 'N/A')} (ID: {profile['id'][:8]}...)")
        
        # 2. Verificar user_roles
        print("\nüìã Verificando roles de usu√°rio...")
        roles = supabase.table('user_roles').select('*').execute()
        print(f"‚úÖ Roles encontradas: {len(roles.data)}")
        
        if roles.data:
            for role in roles.data:
                print(f"   - User: {role['user_id'][:8]}... Role: {role['role']}")
        else:
            print("‚ö†Ô∏è PROBLEMA: Nenhuma role encontrada!")
        
        # 3. Verificar assinaturas ativas
        print("\nüìã Verificando assinaturas ativas...")
        subscriptions = supabase.table('user_subscriptions').select('*').execute()
        print(f"‚úÖ Assinaturas encontradas: {len(subscriptions.data)}")
        
        if subscriptions.data:
            for sub in subscriptions.data:
                print(f"   - User: {sub['user_id'][:8]}... Status: {sub['status']}")
        else:
            print("‚ö†Ô∏è PROBLEMA: Nenhuma assinatura ativa!")
        
        # 4. Testar fun√ß√£o de permiss√µes
        print("\nüìã Testando fun√ß√£o get_user_permissions...")
        if profiles.data:
            first_user_id = profiles.data[0]['id']
            try:
                result = supabase.rpc('get_user_permissions', {'p_user_id': first_user_id}).execute()
                print(f"‚úÖ Fun√ß√£o funcionando: {result.data}")
            except Exception as e:
                print(f"‚ùå Erro na fun√ß√£o: {str(e)}")
        
        return {
            'users_count': len(profiles.data),
            'roles_count': len(roles.data),
            'subscriptions_count': len(subscriptions.data),
            'has_admin': any(role['role'] == 'admin' for role in roles.data)
        }
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {str(e)}")
        return None

def diagnose_payment_system():
    """Diagnostica problemas no sistema de pagamentos"""
    print("\nüí≥ DIAGN√ìSTICO DO SISTEMA DE PAGAMENTOS")
    print("=" * 50)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    try:
        # 1. Verificar tabelas de pagamento
        print("\nüìã Verificando tabelas de pagamento...")
        
        # Asaas cobran√ßas
        cobrancas = supabase.table('asaas_cobrancas').select('*').execute()
        print(f"‚úÖ Cobran√ßas Asaas: {len(cobrancas.data)}")
        
        # Valores de certid√µes
        valores_cert = supabase.table('valores_certidoes').select('*').execute()
        print(f"‚úÖ Valores de certid√µes: {len(valores_cert.data)}")
        
        if valores_cert.data:
            for valor in valores_cert.data:
                print(f"   - {valor['tipo']}: R$ {valor['valor']}")
        
        # Solicita√ß√µes de regulariza√ß√£o
        try:
            reg_solicitacoes = supabase.table('solicitacoes_regularizacao').select('*').execute()
            print(f"‚úÖ Solicita√ß√µes de regulariza√ß√£o: {len(reg_solicitacoes.data)}")
        except Exception as e:
            print(f"‚ùå Tabela solicitacoes_regularizacao: {str(e)}")
        
        # 2. Testar fun√ß√£o de c√°lculo de certid√£o
        print("\nüìã Testando fun√ß√£o calculate_certification_value...")
        try:
            result = supabase.rpc('calculate_certification_value', {'tipo_certidao_param': 'ministerio'}).execute()
            print(f"‚úÖ Fun√ß√£o funcionando: R$ {result.data}")
        except Exception as e:
            print(f"‚ùå Erro na fun√ß√£o: {str(e)}")
        
        return {
            'cobrancas_count': len(cobrancas.data),
            'valores_cert_count': len(valores_cert.data),
            'functions_working': True
        }
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico de pagamentos: {str(e)}")
        return None

def check_edge_functions_config():
    """Verifica configura√ß√£o das Edge Functions"""
    print("\n‚öôÔ∏è VERIFICA√á√ÉO DE CONFIGURA√á√ÉO DAS EDGE FUNCTIONS")
    print("=" * 50)
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Tentar uma chamada simples para verificar se as fun√ß√µes existem
    functions_to_test = [
        'asaas-create-payment',
        'asaas-webhook', 
        'affiliates-management'
    ]
    
    for func_name in functions_to_test:
        try:
            print(f"\nüìã Testando exist√™ncia de {func_name}...")
            # Fazer uma chamada m√≠nima s√≥ para ver se a fun√ß√£o existe
            response = supabase.functions.invoke(func_name, {'body': {}})
            print(f"‚úÖ Fun√ß√£o {func_name} existe (pode ter erro de dados, mas existe)")
        except Exception as e:
            error_msg = str(e).lower()
            if 'not found' in error_msg or '404' in error_msg:
                print(f"‚ùå Fun√ß√£o {func_name} N√ÉO EXISTE")
            else:
                print(f"‚ö†Ô∏è Fun√ß√£o {func_name} existe mas tem problemas: {str(e)}")

def suggest_fixes(auth_results, payment_results):
    """Sugere corre√ß√µes baseadas nos diagn√≥sticos"""
    print("\nüõ†Ô∏è SUGEST√ïES DE CORRE√á√ÉO")
    print("=" * 50)
    
    fixes_needed = []
    
    if auth_results:
        if auth_results['roles_count'] == 0:
            fixes_needed.append("üîß CR√çTICO: Criar roles de usu√°rio (especialmente admin)")
        
        if auth_results['subscriptions_count'] == 0:
            fixes_needed.append("üîß IMPORTANTE: Criar assinatura para pelo menos um usu√°rio admin")
        
        if not auth_results['has_admin']:
            fixes_needed.append("üîß CR√çTICO: Configurar pelo menos um usu√°rio como admin")
    
    if not fixes_needed:
        fixes_needed.append("‚úÖ Sistema de autentica√ß√£o parece estar funcionando")
    
    print("\nüìã Corre√ß√µes necess√°rias:")
    for i, fix in enumerate(fixes_needed, 1):
        print(f"{i}. {fix}")
    
    return fixes_needed

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DIAGN√ìSTICO COMPLETO DO SISTEMA")
    print("=" * 60)
    
    # Diagn√≥sticos
    auth_results = diagnose_auth_system()
    payment_results = diagnose_payment_system()
    check_edge_functions_config()
    
    # Sugest√µes
    fixes = suggest_fixes(auth_results, payment_results)
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DO DIAGN√ìSTICO")
    print(f"‚úÖ Usu√°rios: {auth_results['users_count'] if auth_results else 'N/A'}")
    print(f"‚úÖ Roles: {auth_results['roles_count'] if auth_results else 'N/A'}")
    print(f"‚úÖ Assinaturas: {auth_results['subscriptions_count'] if auth_results else 'N/A'}")
    print(f"‚úÖ Valores de certid√£o: {payment_results['valores_cert_count'] if payment_results else 'N/A'}")
    print(f"üîß Corre√ß√µes necess√°rias: {len(fixes)}")
    print("=" * 60)

if __name__ == "__main__":
    main()
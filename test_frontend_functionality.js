// Script para testar funcionalidades do frontend
// Execute no console do navegador na p√°gina /dashboard/admin/subscriptions

console.log('üß™ TESTE DE FUNCIONALIDADE DO FRONTEND');
console.log('=====================================');

// 1. Verificar se os componentes est√£o carregados
console.log('\nüìã VERIFICA√á√ÉO DE COMPONENTES:');
console.log('- SubscriptionsManagement:', document.querySelector('[data-testid="subscriptions-management"]') ? '‚úÖ Carregado' : '‚ö†Ô∏è N√£o encontrado');
console.log('- Bot√£o Novo Plano:', document.querySelector('button:contains("Novo Plano")') ? '‚úÖ Presente' : '‚ö†Ô∏è N√£o encontrado');

// 2. Verificar se h√° erros no console
console.log('\nüö® VERIFICA√á√ÉO DE ERROS:');
const errors = [];
const originalError = console.error;
console.error = function(...args) {
  errors.push(args.join(' '));
  originalError.apply(console, args);
};

// 3. Verificar se os hooks est√£o funcionando
console.log('\nüîó VERIFICA√á√ÉO DE HOOKS:');
try {
  // Simular chamada do hook
  fetch('/api/subscription-plans')
    .then(response => {
      console.log('- API Response Status:', response.status);
      return response.json();
    })
    .then(data => {
      console.log('- Dados recebidos:', data ? '‚úÖ Sucesso' : '‚ùå Vazio');
    })
    .catch(error => {
      console.log('- Erro na API:', error.message);
    });
} catch (e) {
  console.log('- Erro ao testar API:', e.message);
}

// 4. Verificar localStorage/sessionStorage
console.log('\nüíæ VERIFICA√á√ÉO DE STORAGE:');
console.log('- Auth Token:', localStorage.getItem('supabase.auth.token') ? '‚úÖ Presente' : '‚ùå Ausente');
console.log('- Session:', sessionStorage.length > 0 ? '‚úÖ Ativa' : '‚ùå Vazia');

// 5. Verificar se Supabase est√° conectado
console.log('\nüîå VERIFICA√á√ÉO DE CONEX√ÉO:');
if (window.supabase) {
  console.log('- Supabase Client:', '‚úÖ Carregado');
  window.supabase.from('subscription_plans').select('count').then(result => {
    console.log('- Conex√£o DB:', result.error ? '‚ùå Erro: ' + result.error.message : '‚úÖ Conectado');
  });
} else {
  console.log('- Supabase Client:', '‚ùå N√£o encontrado');
}

// 6. Aguardar e reportar erros
setTimeout(() => {
  console.log('\nüìä RESUMO DOS ERROS:');
  if (errors.length === 0) {
    console.log('‚úÖ Nenhum erro encontrado!');
  } else {
    console.log('‚ùå Erros encontrados:');
    errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  }
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Verifique se a p√°gina carrega sem erros');
  console.log('2. Teste o bot√£o "Novo Plano"');
  console.log('3. Verifique se a listagem aparece (mesmo vazia)');
  console.log('4. Teste a cria√ß√£o de um plano de exemplo');
  
}, 3000);

console.log('\n‚è≥ Aguardando 3 segundos para coletar erros...');
import { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactNode } from 'react';\nimport { useSubscriptionPlans } from '@/hooks/useSubscriptionPlans';\nimport { supabase } from '@/integrations/supabase/client';\n\n// Mock do Supabase\njest.mock('@/integrations/supabase/client');\n\n// Mock dos dados de teste\nconst mockSubscriptionPlans = [\n  {\n    id: '1',\n    name: 'Plano Básico',\n    description: 'Plano básico para pastores',\n    price: 50.00,\n    recurrence: 'monthly',\n    permissions: {\n      manage_events: true,\n      manage_news: false,\n      manage_media: false\n    },\n    is_active: true,\n    sort_order: 1,\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    _count: {\n      users: 5,\n      member_types: 2\n    }\n  },\n  {\n    id: '2',\n    name: 'Plano Premium',\n    description: 'Plano premium com todas as funcionalidades',\n    price: 100.00,\n    recurrence: 'monthly',\n    permissions: {\n      manage_events: true,\n      manage_news: true,\n      manage_media: true\n    },\n    is_active: true,\n    sort_order: 2,\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    _count: {\n      users: 10,\n      member_types: 3\n    }\n  }\n];\n\nconst mockMemberTypes = [\n  {\n    id: '1',\n    name: 'Pastor',\n    description: 'Pastor da igreja local'\n  }\n];\n\n// Wrapper para React Query\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n  \n  return ({ children }: { children: ReactNode }) => (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n};\n\ndescribe('useSubscriptionPlans', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Buscar planos de assinatura', () => {\n    it('deve buscar planos com sucesso', async () => {\n      const mockSupabaseResponse = {\n        data: mockSubscriptionPlans,\n        error: null\n      };\n\n      (supabase.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue(mockSupabaseResponse)\n          })\n        })\n      });\n\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.plans).toEqual(mockSubscriptionPlans);\n      expect(result.current.error).toBeNull();\n    });\n\n    it('deve lidar com erro ao buscar planos', async () => {\n      const mockError = new Error('Erro de conexão');\n      \n      (supabase.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: null,\n              error: mockError\n            })\n          })\n        })\n      });\n\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      expect(result.current.plans).toEqual([]);\n      expect(result.current.error).toBeTruthy();\n    });\n  });\n\n  describe('Filtrar planos por tipo de membro', () => {\n    it('deve buscar planos para tipo de membro específico', async () => {\n      const memberTypeId = '1';\n      const filteredPlans = [mockSubscriptionPlans[0]];\n\n      (supabase.from as jest.Mock).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            order: jest.fn().mockResolvedValue({\n              data: filteredPlans,\n              error: null\n            })\n          })\n        })\n      });\n\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      const plans = await result.current.getPlansForMemberType(memberTypeId);\n      \n      expect(plans).toEqual(filteredPlans);\n    });\n  });\n\n  describe('Formatação de preços', () => {\n    it('deve formatar preço mensal corretamente', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const formatted = result.current.formatPrice(50.00, 'monthly');\n      \n      expect(formatted).toBe('R$ 50,00/mês');\n    });\n\n    it('deve formatar preço anual corretamente', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const formatted = result.current.formatPrice(600.00, 'annual');\n      \n      expect(formatted).toBe('R$ 600,00/ano');\n    });\n\n    it('deve formatar preço semestral corretamente', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const formatted = result.current.formatPrice(300.00, 'semestral');\n      \n      expect(formatted).toBe('R$ 300,00/semestre');\n    });\n  });\n\n  describe('Validação de planos', () => {\n    it('deve validar plano válido', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const validPlan = {\n        name: 'Plano Teste',\n        description: 'Descrição do plano',\n        price: 75.00,\n        recurrence: 'monthly' as const,\n        permissions: {\n          manage_events: true,\n          manage_news: false,\n          manage_media: true\n        },\n        member_types: ['1', '2'],\n        is_active: true,\n        sort_order: 1\n      };\n\n      expect(() => {\n        result.current.validateSubscriptionPlan(validPlan);\n      }).not.toThrow();\n    });\n\n    it('deve rejeitar plano com dados inválidos', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const invalidPlan = {\n        name: '', // Nome vazio\n        description: 'Descrição válida',\n        price: -10, // Preço negativo\n        recurrence: 'invalid' as any,\n        permissions: {},\n        member_types: [],\n        is_active: true,\n        sort_order: 0\n      };\n\n      expect(() => {\n        result.current.validateSubscriptionPlan(invalidPlan);\n      }).toThrow();\n    });\n  });\n\n  describe('Criar plano de assinatura', () => {\n    it('deve criar plano com sucesso', async () => {\n      const newPlan = {\n        name: 'Novo Plano',\n        description: 'Descrição do novo plano',\n        price: 80.00,\n        recurrence: 'monthly' as const,\n        permissions: {\n          manage_events: true,\n          manage_news: true,\n          manage_media: false\n        },\n        member_types: ['1'],\n        is_active: true,\n        sort_order: 3\n      };\n\n      const createdPlan = {\n        id: '3',\n        ...newPlan,\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n      };\n\n      (supabase.from as jest.Mock).mockReturnValue({\n        insert: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: createdPlan,\n              error: null\n            })\n          })\n        })\n      });\n\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      await waitFor(() => {\n        expect(result.current.isLoading).toBe(false);\n      });\n\n      result.current.createSubscriptionPlan.mutate(newPlan);\n\n      await waitFor(() => {\n        expect(result.current.createSubscriptionPlan.isSuccess).toBe(true);\n      });\n    });\n  });\n\n  describe('Utilitários', () => {\n    it('deve calcular desconto PIX corretamente', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const originalPrice = 100.00;\n      const discountedPrice = result.current.calculatePixDiscount(originalPrice);\n      \n      expect(discountedPrice).toBe(95.00); // 5% de desconto\n    });\n\n    it('deve verificar se plano tem permissão específica', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const plan = mockSubscriptionPlans[1]; // Plano Premium\n      \n      expect(result.current.hasPermission(plan, 'manage_events')).toBe(true);\n      expect(result.current.hasPermission(plan, 'manage_news')).toBe(true);\n      expect(result.current.hasPermission(plan, 'manage_media')).toBe(true);\n    });\n\n    it('deve contar permissões ativas', () => {\n      const { result } = renderHook(() => useSubscriptionPlans(), {\n        wrapper: createWrapper()\n      });\n\n      const plan = mockSubscriptionPlans[0]; // Plano Básico\n      const activePermissions = result.current.countActivePermissions(plan);\n      \n      expect(activePermissions).toBe(1); // Apenas manage_events\n    });\n  });\n});"
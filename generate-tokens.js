/**
 * Script para gerar tokens seguros para produ√ß√£o
 * Execute: node generate-tokens.js
 */

import crypto from 'crypto';

function generateSecureToken(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

function generateWebhookToken() {
  return `webhook_prod_${generateSecureToken(24)}`;
}

function generateEncryptionKey() {
  return `encrypt_prod_${generateSecureToken(24)}`;
}

console.log('üîê TOKENS SEGUROS PARA PRODU√á√ÉO');
console.log('================================\n');

console.log('üì° WEBHOOK TOKEN:');
console.log(generateWebhookToken());
console.log('');

console.log('üîí ENCRYPTION KEY:');
console.log(generateEncryptionKey());
console.log('');

console.log('üé≤ TOKEN GEN√âRICO (32 chars):');
console.log(generateSecureToken(32));
console.log('');

console.log('‚ö†Ô∏è  IMPORTANTE:');
console.log('- Copie estes tokens e configure nas vari√°veis de ambiente');
console.log('- NUNCA compartilhe estes tokens');
console.log('- Use tokens diferentes para cada ambiente');
console.log('- Configure o mesmo webhook token no painel do Asaas');
console.log('');

console.log('üìã PR√ìXIMOS PASSOS:');
console.log('1. Configure no Vercel (Environment Variables)');
console.log('2. Configure no Supabase (Edge Functions ‚Üí Secrets)');
console.log('3. Configure no Asaas (Webhooks ‚Üí Token de Autentica√ß√£o)');
console.log('4. Execute as migra√ß√µes do banco');
console.log('5. Teste a integra√ß√£o completa');
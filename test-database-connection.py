#!/usr/bin/env python3
"""
Script para testar conex√£o direta com Supabase
e verificar se a cobran√ßa realmente existe
"""

from supabase import create_client, Client
import json

# Configura√ß√µes extra√≠das do c√≥digo
SUPABASE_URL = "https://amkelczfwazutrciqtlk.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFta2VsY3pmd2F6dXRyY2lxdGxrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODQxMjYsImV4cCI6MjA2ODc2MDEyNn0.7-M7DCqMzfZtXvcg6Zlf24zNv-XqvDT_oAznQGiqFHY"

def test_database_connection():
    """Testa conex√£o e busca dados reais"""
    try:
        print("üîÑ Conectando ao Supabase...")
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        # Testar conex√£o b√°sica
        print("‚úÖ Conex√£o estabelecida!")
        
        # Verificar tabela asaas_cobrancas
        print("\nüìã Verificando tabela asaas_cobrancas...")
        
        # Contar total de registros
        count_response = supabase.table('asaas_cobrancas').select('*', count='exact').execute()
        total_count = count_response.count
        print(f"üìä Total de cobran√ßas: {total_count}")
        
        # Buscar √∫ltimas 5 cobran√ßas
        recent_response = supabase.table('asaas_cobrancas').select('*').order('created_at', desc=True).limit(5).execute()
        recent_cobrancas = recent_response.data
        
        print(f"\nüîç √öltimas {len(recent_cobrancas)} cobran√ßas:")
        for i, cobranca in enumerate(recent_cobrancas, 1):
            print(f"  {i}. ID: {cobranca.get('id', 'N/A')}")
            print(f"     Status: {cobranca.get('status', 'N/A')}")
            print(f"     Valor: R$ {cobranca.get('valor', 'N/A')}")
            print(f"     Tipo: {cobranca.get('tipo_cobranca', 'N/A')}")
            print(f"     Criado: {cobranca.get('created_at', 'N/A')}")
            print()
        
        # Buscar cobran√ßa espec√≠fica do √∫ltimo teste
        test_id = "4f8e2d1c-9b7a-4e3f-8c5d-1a2b3c4d5e6f"
        print(f"üéØ Buscando cobran√ßa espec√≠fica: {test_id}")
        
        specific_response = supabase.table('asaas_cobrancas').select('*').eq('id', test_id).execute()
        
        if specific_response.data:
            print("‚úÖ Cobran√ßa encontrada!")
            print(json.dumps(specific_response.data[0], indent=2, default=str))
        else:
            print("‚ùå Cobran√ßa n√£o encontrada!")
            print("üîç Poss√≠veis causas:")
            print("  - ID n√£o existe na tabela")
            print("  - Problema de RLS (Row Level Security)")
            print("  - Delay na inser√ß√£o")
        
        # Verificar RLS policies
        print("\nüîí Verificando pol√≠ticas RLS...")
        try:
            # Tentar buscar sem filtros (teste de RLS)
            all_response = supabase.table('asaas_cobrancas').select('id').limit(1).execute()
            if all_response.data:
                print("‚úÖ RLS permite leitura")
            else:
                print("‚ö†Ô∏è RLS pode estar bloqueando")
        except Exception as rls_error:
            print(f"‚ùå Erro de RLS: {rls_error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

if __name__ == "__main__":
    print("üß™ TESTE DE CONEX√ÉO COM BANCO DE DADOS")
    print("=" * 50)
    test_database_connection()
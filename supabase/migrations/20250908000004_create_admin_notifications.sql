-- ============================================================================
-- MIGRA√á√ÉO: SISTEMA DE NOTIFICA√á√ïES ADMINISTRATIVAS
-- Data: 08/09/2025
-- Objetivo: Criar tabela para notifica√ß√µes administrativas
-- ============================================================================

-- 1. CRIAR TABELA DE NOTIFICA√á√ïES ADMINISTRATIVAS
-- ============================================================================

CREATE TABLE IF NOT EXISTS public.admin_notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('info', 'success', 'warning', 'error')),
    category TEXT NOT NULL CHECK (category IN ('payment', 'subscription', 'system', 'user_action')),
    service_type TEXT CHECK (service_type IN ('filiacao', 'certidao', 'regularizacao')),
    reference_id TEXT,
    user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    read BOOLEAN DEFAULT FALSE NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- 2. CRIAR √çNDICES PARA PERFORMANCE
-- ============================================================================

-- √çndice para buscar notifica√ß√µes n√£o lidas
CREATE INDEX IF NOT EXISTS idx_admin_notifications_read 
ON public.admin_notifications(read, created_at DESC);

-- √çndice para buscar por tipo
CREATE INDEX IF NOT EXISTS idx_admin_notifications_type 
ON public.admin_notifications(type, created_at DESC);

-- √çndice para buscar por categoria
CREATE INDEX IF NOT EXISTS idx_admin_notifications_category 
ON public.admin_notifications(category, created_at DESC);

-- √çndice para buscar por tipo de servi√ßo
CREATE INDEX IF NOT EXISTS idx_admin_notifications_service_type 
ON public.admin_notifications(service_type, created_at DESC);

-- √çndice para buscar por refer√™ncia
CREATE INDEX IF NOT EXISTS idx_admin_notifications_reference 
ON public.admin_notifications(reference_id);

-- √çndice para buscar por usu√°rio
CREATE INDEX IF NOT EXISTS idx_admin_notifications_user 
ON public.admin_notifications(user_id, created_at DESC);

-- √çndice composto para queries comuns
CREATE INDEX IF NOT EXISTS idx_admin_notifications_read_category 
ON public.admin_notifications(read, category, created_at DESC);

-- 3. CRIAR TRIGGER PARA UPDATED_AT
-- ============================================================================

CREATE OR REPLACE FUNCTION public.update_admin_notifications_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_admin_notifications_updated_at
    BEFORE UPDATE ON public.admin_notifications
    FOR EACH ROW
    EXECUTE FUNCTION public.update_admin_notifications_updated_at();

-- 4. CRIAR POL√çTICAS RLS
-- ============================================================================

-- Habilitar RLS
ALTER TABLE public.admin_notifications ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para administradores lerem todas as notifica√ß√µes
CREATE POLICY "Admins can read all admin notifications" ON public.admin_notifications
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.user_roles 
            WHERE user_roles.user_id = auth.uid() 
            AND user_roles.role = 'admin'
        )
    );

-- Pol√≠tica para administradores criarem notifica√ß√µes
CREATE POLICY "Admins can create admin notifications" ON public.admin_notifications
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.user_roles 
            WHERE user_roles.user_id = auth.uid() 
            AND user_roles.role = 'admin'
        )
    );

-- Pol√≠tica para administradores atualizarem notifica√ß√µes
CREATE POLICY "Admins can update admin notifications" ON public.admin_notifications
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM public.user_roles 
            WHERE user_roles.user_id = auth.uid() 
            AND user_roles.role = 'admin'
        )
    );

-- Pol√≠tica para administradores deletarem notifica√ß√µes
CREATE POLICY "Admins can delete admin notifications" ON public.admin_notifications
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM public.user_roles 
            WHERE user_roles.user_id = auth.uid() 
            AND user_roles.role = 'admin'
        )
    );

-- 5. CRIAR FUN√á√ÉO PARA CRIAR NOTIFICA√á√ÉO AUTOM√ÅTICA
-- ============================================================================

CREATE OR REPLACE FUNCTION public.create_admin_notification(
    p_title TEXT,
    p_message TEXT,
    p_type TEXT DEFAULT 'info',
    p_category TEXT DEFAULT 'system',
    p_service_type TEXT DEFAULT NULL,
    p_reference_id TEXT DEFAULT NULL,
    p_user_id UUID DEFAULT NULL,
    p_metadata JSONB DEFAULT NULL
) RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    notification_id UUID;
BEGIN
    -- Validar par√¢metros
    IF p_title IS NULL OR p_title = '' THEN
        RAISE EXCEPTION 'Title cannot be empty';
    END IF;
    
    IF p_message IS NULL OR p_message = '' THEN
        RAISE EXCEPTION 'Message cannot be empty';
    END IF;
    
    IF p_type NOT IN ('info', 'success', 'warning', 'error') THEN
        RAISE EXCEPTION 'Invalid notification type';
    END IF;
    
    IF p_category NOT IN ('payment', 'subscription', 'system', 'user_action') THEN
        RAISE EXCEPTION 'Invalid notification category';
    END IF;
    
    -- Inserir notifica√ß√£o
    INSERT INTO public.admin_notifications (
        title,
        message,
        type,
        category,
        service_type,
        reference_id,
        user_id,
        metadata
    ) VALUES (
        p_title,
        p_message,
        p_type,
        p_category,
        p_service_type,
        p_reference_id,
        p_user_id,
        p_metadata
    ) RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$;

-- 6. CRIAR FUN√á√ÉO PARA LIMPEZA AUTOM√ÅTICA DE NOTIFICA√á√ïES ANTIGAS
-- ============================================================================

CREATE OR REPLACE FUNCTION public.cleanup_old_admin_notifications(
    days_to_keep INTEGER DEFAULT 90
) RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    -- Deletar notifica√ß√µes lidas mais antigas que o per√≠odo especificado
    DELETE FROM public.admin_notifications 
    WHERE read = TRUE 
    AND created_at < NOW() - INTERVAL '1 day' * days_to_keep;
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    
    RETURN deleted_count;
END;
$$;

-- 7. INSERIR NOTIFICA√á√ïES DE EXEMPLO (OPCIONAL)
-- ============================================================================

-- Inserir algumas notifica√ß√µes de exemplo para teste
INSERT INTO public.admin_notifications (title, message, type, category, service_type) VALUES
('Sistema Inicializado', 'Sistema de notifica√ß√µes administrativas foi configurado com sucesso.', 'success', 'system', NULL),
('Configura√ß√£o Completa', 'Todas as tabelas e pol√≠ticas foram criadas corretamente.', 'info', 'system', NULL);

-- 8. COMENT√ÅRIOS E DOCUMENTA√á√ÉO
-- ============================================================================

COMMENT ON TABLE public.admin_notifications IS 'Notifica√ß√µes administrativas do sistema';
COMMENT ON COLUMN public.admin_notifications.title IS 'T√≠tulo da notifica√ß√£o';
COMMENT ON COLUMN public.admin_notifications.message IS 'Mensagem detalhada da notifica√ß√£o';
COMMENT ON COLUMN public.admin_notifications.type IS 'Tipo da notifica√ß√£o: info, success, warning, error';
COMMENT ON COLUMN public.admin_notifications.category IS 'Categoria: payment, subscription, system, user_action';
COMMENT ON COLUMN public.admin_notifications.service_type IS 'Tipo de servi√ßo relacionado: filiacao, certidao, regularizacao';
COMMENT ON COLUMN public.admin_notifications.reference_id IS 'ID de refer√™ncia (cobran√ßa, assinatura, etc.)';
COMMENT ON COLUMN public.admin_notifications.user_id IS 'ID do usu√°rio relacionado √† notifica√ß√£o';
COMMENT ON COLUMN public.admin_notifications.read IS 'Se a notifica√ß√£o foi lida';
COMMENT ON COLUMN public.admin_notifications.metadata IS 'Dados adicionais em formato JSON';

COMMENT ON FUNCTION public.create_admin_notification IS 'Fun√ß√£o para criar notifica√ß√µes administrativas';
COMMENT ON FUNCTION public.cleanup_old_admin_notifications IS 'Fun√ß√£o para limpeza de notifica√ß√µes antigas';

-- 9. VERIFICA√á√ïES FINAIS
-- ============================================================================

-- Verificar se a tabela foi criada
SELECT 
    'Tabela admin_notifications criada com sucesso!' as status,
    COUNT(*) as total_notifications
FROM public.admin_notifications;

-- Verificar √≠ndices criados
SELECT 
    '√çndices criados:' as info;

SELECT 
    indexname,
    tablename
FROM pg_indexes 
WHERE tablename = 'admin_notifications' 
AND schemaname = 'public';

-- Verificar pol√≠ticas RLS
SELECT 
    'Pol√≠ticas RLS criadas:' as info;

SELECT 
    policyname,
    cmd,
    permissive
FROM pg_policies 
WHERE tablename = 'admin_notifications' 
AND schemaname = 'public';

-- 10. MENSAGEM FINAL
-- ============================================================================

SELECT 
    'üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!' as resultado,
    '‚úÖ Tabela admin_notifications criada' as item_1,
    '‚úÖ √çndices de performance criados' as item_2,
    '‚úÖ Pol√≠ticas RLS configuradas' as item_3,
    '‚úÖ Fun√ß√µes auxiliares criadas' as item_4,
    '‚úÖ Triggers de atualiza√ß√£o configurados' as item_5,
    'üöÄ Sistema de notifica√ß√µes administrativas pronto!' as proximo_passo;
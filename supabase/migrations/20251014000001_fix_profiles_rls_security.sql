-- ============================================
-- CORRE칂츾O CR칈TICA: RLS da Tabela Profiles
-- ============================================
-- Data: 2025-10-14
-- Severidade: 游댮 CR칈TICA (Viola칞칚o LGPD)
-- Problema: Tabela profiles acess칤vel sem autentica칞칚o
-- Solu칞칚o: Implementar pol칤ticas RLS restritivas
--
-- AN츼LISE PR칄VIA REALIZADA:
-- - Tabela existe com 3 registros
-- - Dados sens칤veis expostos: CPF, RG, endere칞o, telefone
-- - 17 arquivos no c칩digo acessam esta tabela
-- - Funcionalidades afetadas: Login, Filia칞칚o, Dashboard, Admin
--
-- POL칈TICAS ATUAIS (PERMISSIVAS):
-- 1. "Enable read access for authenticated users" - Permite qualquer autenticado ver tudo
-- 2. "Enable insert for authenticated users" - Permite criar perfil para qualquer ID
-- 3. "Enable update for users based on user_id" - Correta, mas ser치 recriada
--
-- NOVAS POL칈TICAS (RESTRITIVAS):
-- 1. "Users can view own profile" - Usu치rio v칡 apenas pr칩prio perfil
-- 2. "Admins can view all profiles" - Admin v칡 todos
-- 3. "Users can insert own profile" - Usu치rio cria apenas pr칩prio perfil
-- 4. "Users can update own profile" - Usu치rio atualiza apenas pr칩prio perfil
-- 5. "Admins can update all profiles" - Admin atualiza qualquer perfil
--
-- ROLLBACK: Ver arquivo PROFILES_RLS_PLANO.md
-- ============================================

-- IMPORTANTE: Este script deve ser executado em TRANSA칂츾O
-- BEGIN; (executar manualmente)

-- ============================================
-- PASSO 1: REMOVER POL칈TICAS PERMISSIVAS
-- ============================================

-- Remover pol칤tica que permite qualquer autenticado ver todos os perfis
DROP POLICY IF EXISTS "Enable read access for authenticated users" ON profiles;

-- Remover pol칤tica que permite criar perfil para qualquer ID
DROP POLICY IF EXISTS "Enable insert for authenticated users" ON profiles;

-- Remover pol칤tica de update (ser치 recriada com mesmo comportamento)
DROP POLICY IF EXISTS "Enable update for users based on user_id" ON profiles;

-- Remover poss칤veis pol칤ticas antigas que podem estar causando o problema
DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON profiles;
DROP POLICY IF EXISTS "Users can insert their own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;

-- ============================================
-- PASSO 2: CRIAR POL칈TICAS RESTRITIVAS
-- ============================================

-- POL칈TICA 1: Usu치rio pode ver APENAS pr칩prio perfil
-- L칩gica: auth.uid() (ID do usu치rio logado) = id (ID do registro)
-- Resultado: Cada usu치rio v칡 apenas sua pr칩pria linha
CREATE POLICY "Users can view own profile"
  ON profiles FOR SELECT
  USING (auth.uid() = id);

-- POL칈TICA 2: Admin pode ver TODOS os perfis
-- L칩gica: Verifica se usu치rio logado tem tipo_membro = 'admin' ou 'super_admin'
-- Resultado: Se for admin, v칡 todos os registros
CREATE POLICY "Admins can view all profiles"
  ON profiles FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE id = auth.uid()
      AND tipo_membro IN ('admin', 'super_admin')
    )
  );

-- POL칈TICA 3: Usu치rio pode criar APENAS pr칩prio perfil
-- L칩gica: WITH CHECK valida que ID do novo registro = ID do usu치rio logado
-- Resultado: Impede criar perfil para outro usu치rio
CREATE POLICY "Users can insert own profile"
  ON profiles FOR INSERT
  WITH CHECK (auth.uid() = id);

-- POL칈TICA 4: Usu치rio pode atualizar APENAS pr칩prio perfil
-- L칩gica: USING encontra registro, WITH CHECK valida ap칩s atualiza칞칚o
-- Resultado: Dupla prote칞칚o - s칩 encontra e s칩 atualiza pr칩prio perfil
CREATE POLICY "Users can update own profile"
  ON profiles FOR UPDATE
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- POL칈TICA 5: Admin pode atualizar QUALQUER perfil
-- L칩gica: Verifica se quem est치 atualizando 칠 admin/super_admin
-- Resultado: Admin pode modificar dados de qualquer usu치rio (necess치rio para administra칞칚o)
CREATE POLICY "Admins can update all profiles"
  ON profiles FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM profiles
      WHERE id = auth.uid()
      AND tipo_membro IN ('admin', 'super_admin')
    )
  );

-- ============================================
-- PASSO 3: GARANTIR QUE RLS EST츼 HABILITADO
-- ============================================

-- Habilitar RLS na tabela (se j치 estiver habilitado, n칚o faz nada)
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- ============================================
-- VALIDA칂츾O OBRIGAT칍RIA ANTES DE COMMIT
-- ============================================

-- ATEN칂츾O: N츾O FA칂A COMMIT AINDA!
-- Execute os testes abaixo ANTES de fazer COMMIT:

-- TESTE 1: Usu치rio n칚o autenticado N츾O deve ver nada
-- SET ROLE anon;
-- SELECT COUNT(*) FROM profiles; -- Esperado: 0 ou erro

-- TESTE 2: Usu치rio comum v칡 APENAS pr칩prio perfil
-- SET ROLE authenticated;
-- SELECT set_config('request.jwt.claims', '{"sub":"474d62fe-d9b9-4e90-88f9-e0b0beb44042"}', true);
-- SELECT COUNT(*) FROM profiles; -- Esperado: 1
-- SELECT COUNT(*) FROM profiles WHERE id = '474d62fe-d9b9-4e90-88f9-e0b0beb44042'; -- Esperado: 1
-- SELECT COUNT(*) FROM profiles WHERE id != '474d62fe-d9b9-4e90-88f9-e0b0beb44042'; -- Esperado: 0

-- TESTE 3: Admin v칡 TODOS os perfis
-- SET ROLE authenticated;
-- SELECT set_config('request.jwt.claims', '{"sub":"c2e01b5c-f6af-4906-94e3-ea7cdf1ec02a"}', true);
-- SELECT COUNT(*) FROM profiles; -- Esperado: 3 (todos)

-- SE TODOS OS TESTES PASSAREM:
-- COMMIT;

-- SE QUALQUER TESTE FALHAR:
-- ROLLBACK;

-- ============================================
-- SCRIPT DE ROLLBACK (SE NECESS츼RIO)
-- ============================================

-- Se algo quebrar ap칩s COMMIT, execute:
/*
BEGIN;

-- Remover pol칤ticas novas
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Admins can view all profiles" ON profiles;
DROP POLICY IF EXISTS "Users can insert own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Admins can update all profiles" ON profiles;

-- Restaurar pol칤ticas antigas (ATEN칂츾O: Isso volta a expor os dados!)
CREATE POLICY "Enable read access for authenticated users" ON profiles
  FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Enable insert for authenticated users" ON profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

CREATE POLICY "Enable update for users based on user_id" ON profiles
  FOR UPDATE USING (auth.uid() = id);

COMMIT;
*/

-- ============================================
-- FIM DO SCRIPT
-- ============================================

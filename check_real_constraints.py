#!/usr/bin/env python3
"""
Script para verificar as constraints reais da tabela subscription_plans
usando APENAS LEITURA conforme regras do Supabase
"""

from supabase import create_client, Client

def get_supabase_client():
    """Conecta ao Supabase usando as credenciais do projeto"""
    # Extrair configura√ß√µes de src/integrations/supabase/client.ts
    SUPABASE_URL = "https://amkelczfwazutrciqtlk.supabase.co"
    SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFta2VsY3pmd2F6dXRyY2lxdGxrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxODQxMjYsImV4cCI6MjA2ODc2MDEyNn0.7-M7DCqMzfZtXvcg6Zlf24zNv-XqvDT_oAznQGiqFHY"
    
    return create_client(SUPABASE_URL, SUPABASE_KEY)

def analyze_constraints():
    """Analisa as constraints reais do banco usando APENAS LEITURA"""
    print("üîç AN√ÅLISE DE CONSTRAINTS REAIS - subscription_plans")
    print("=" * 60)
    print("‚ö†Ô∏è  USANDO APENAS LEITURA - N√ÉO EXECUTANDO OPERA√á√ïES DE ESCRITA")
    print()
    
    supabase = get_supabase_client()
    
    # 1. Verificar se existem registros para analisar valores v√°lidos
    print("üìã VERIFICANDO REGISTROS EXISTENTES:")
    print("-" * 50)
    
    try:
        response = supabase.table('subscription_plans').select('*').execute()
        
        if response.data:
            print(f"‚úÖ Encontrados {len(response.data)} registros existentes")
            print("\nüìä VALORES DE RECORR√äNCIA EXISTENTES:")
            
            recurrence_values = set()
            for record in response.data:
                if 'recurrence' in record and record['recurrence']:
                    recurrence_values.add(record['recurrence'])
                    print(f"   ‚Ä¢ ID: {record.get('id', 'N/A')[:8]}... - Recorr√™ncia: '{record['recurrence']}'")
            
            if recurrence_values:
                print(f"\n‚úÖ VALORES V√ÅLIDOS DESCOBERTOS: {list(recurrence_values)}")
            else:
                print("\n‚ö†Ô∏è  Nenhum valor de recorr√™ncia encontrado nos registros")
                
        else:
            print("üìã Tabela est√° vazia - n√£o h√° registros para analisar")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar registros: {str(e)}")
    
    # 2. Analisar a mensagem de erro para descobrir valores v√°lidos
    print(f"\nüö® AN√ÅLISE DO ERRO REPORTADO:")
    print("-" * 50)
    print("Erro: 'Recorr√™ncia deve ser Mensal ou Anual'")
    print("Fun√ß√£o: validate_subscription_plan_data()")
    print("‚úÖ VALORES V√ÅLIDOS IDENTIFICADOS: 'Mensal', 'Anual'")
    
    # 3. Verificar se h√° outros registros com valores diferentes
    print(f"\nüîç TESTANDO VALORES POSS√çVEIS (APENAS LEITURA):")
    print("-" * 50)
    
    possible_values = ['Mensal', 'Anual', 'monthly', 'annual', 'semestral', 'Semestral']
    
    for value in possible_values:
        try:
            # APENAS SELECT - n√£o INSERT
            response = supabase.table('subscription_plans').select('id').eq('recurrence', value).limit(1).execute()
            
            if response.data:
                print(f"‚úÖ '{value}': EXISTE no banco ({len(response.data)} registro(s))")
            else:
                print(f"‚ùå '{value}': N√ÉO encontrado no banco")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  '{value}': Erro ao verificar - {str(e)}")
    
    # 4. Gerar script SQL correto
    print(f"\nüìù SCRIPT SQL CORRETO BASEADO NA AN√ÅLISE:")
    print("-" * 50)
    print("-- Script baseado na an√°lise real do banco")
    print("-- Fun√ß√£o validate_subscription_plan_data() espera: 'Mensal' ou 'Anual'")
    print()
    print("INSERT INTO subscription_plans (plan_title, description, price, recurrence, is_active) VALUES")
    print("('Anuidade Pastor 2025', 'Plano anual para pastores com acesso completo', 120.00, 'Anual', true),")
    print("('Anuidade Membro Regular', 'Plano b√°sico anual para membros', 60.00, 'Anual', true),")
    print("('Contribui√ß√£o Mensal B√°sica', 'Plano mensal para membros regulares', 35.00, 'Mensal', true);")
    
    print(f"\nüéØ CORRE√á√ïES NECESS√ÅRIAS NO FRONTEND:")
    print("-" * 50)
    print("1. Schema do formul√°rio deve aceitar: 'Mensal', 'Anual'")
    print("2. Op√ß√µes do select devem ser: 'Mensal', 'Anual'")
    print("3. Fun√ß√£o de formata√ß√£o deve mapear corretamente")
    
    print("\n" + "=" * 60)
    print("‚úÖ AN√ÅLISE CONCLU√çDA - APENAS LEITURA UTILIZADA")

if __name__ == "__main__":
    analyze_constraints()